#!/bin/bash
#SBATCH --time=48:00:00
#SBATCH --account=def-gowens
#SBATCH --ntasks=10
#SBATCH --mem-per-cpu=20G

#Batch process for SyRI analysis
#0 Give paths to the command
export PATH=$PATH:/home/kaedeh/projects/def-gowens/kaedeh/cranberry_genome/bin2/anchorwave/minimap2/
export PATH=$PATH:/home/kaedeh/projects/def-gowens/kaedeh/cranberry_genome/bin
#1) Load reference and query genome (fasta) = genome.fa

#2) Process reference and query genome
#2.1) Remove fragments and retain chromosomes only
cat refgenome.fa | grep ">chr" | sed s/">"//g > refgenome_chr_names.txt
samtools faidx refgenome.fa -r refgenome_chr_names.txt > refgenome_chr.fa
cat qrygenome.fa | grep ">chr" | sed s/">"//g > qrygenome_chr_names.txt
samtools faidx qrygenome.fa -r qrygenome_chr_names.txt > qrygenome_chr.fa
#2.1.2) If the fasta files have messy headline, remove spacer and pick a unique column
cat refgenome.fa | cut -f 1 -d " " > ref.fa #This separates by a space, retains the first column.
cat refgenome.fa | grep ">CM" | cut -f 1 -d " " | sed s/">"//g > ref_chr_names.txt

#3) Run SyRI round1
#3.1) Perform whole genome alignment using minimap2
minimap2 -t 10 -ax asm5 --eqx refgenome_chr.fa qrygenome_chr.fa > minimap2_ref_qrygenome_chr_alignment.sam
#3.2) Run SyRI
source python_env/bin/activate #python_env is found in kaedeh/cranberry_genome/bin/
pip install cython numpy scipy
pip install biopython psutil python-igraph pysam
pip install pandas
export PATH=$PATH:/home/kaedeh/projects/def-gowens/kaedeh/cranberry_genome/bin/syri #might make error saying syri not installed *come back
PATH_TO_SYRI="/home/kaedeh/projects/def-gowens/kaedeh/cranberry_genome/bin/syri/syri/bin/syri"
PATH_TO_PLOTSR="/home/kaedeh/projects/def-gowens/kaedeh/cranberry_genome/bin/syri/syri/bin/plotsr"
python3 $PATH_TO_SYRI \
-c minimap2_ref_qrygenome_chr_alignment.sam \
-r refgenome_chr.fa \
-q qrygenome_chr.fa \
-k -F S 2> syri_error_out #If this command gives error reverse those chromosomes that don't match, proceed to #4.
      #look at the error message it prints, and figure out which ones to reverse.
cat syri_error_out.txt | grep WARN  | grep "high fraction of inverted" | cut -f 23 -d " " | sed s/\(//g | sed s/\)\.//g > chr_to_rev.txt

#4) Reverse complement strands that got inverted from mapping result *manual ID required
mkdir chr_by_chr_fasta
#d chr_by_chr_fasta
#cp ../qrygenome_chr_names.txt .
for chr in `cat A_duranensis_chrnames_renamed_for_EDTA.txt`;
do echo $chr > chr_by_chr_fasta/$chr;
samtools faidx A_duranensis_refgenome_renamed_for_EDTA_chr.fa -i $chr > chr_by_chr_fasta/$chr.fwd.fa;
done #forward strand fasta for each chromosome
for chr in `cat V_myrtillus_chr.names.txt`;
do echo $chr > V_myrtillus_chr/$chr.txt;
samtools faidx V_myrtillus_NK2018_v1-assembly.chr.fasta -i -r V_myrtillus_chr/$chr.txt > V_myrtillus_chr/$chr.rev.fa;
done #reverse strand fasta for each chromosome

#Keep ones you want, Delete ones you don't in that "V_myrtillus_chr" directory.
#concatenate all separate chromosome fasta files with desired chromosome strands into one processed genome file.
cat * > ../qrygenome_chr_rev.fa

#5) Run SyRI round2
#5.1) Perform whole genome alignment using minimap2
minimap2 -t 10 -ax asm5 --eqx refgenome.fa qrygenome_rev.fa > minimap2_ref_qrygenome_chr_alignment_rev.sam
#5.2) Run SyRI
source python_env/bin/activate
python3 $PATH_TO_SYRI \
-c minimap2_ref_qrygenome_chr_alignment_rev.sam \
-r refgenome.fa \
-q qrygenome_chr_rev.fa \
-k -F S #successful: syri_out directory is created.
#5.3) Visualize the alignment in PDF format (built-in SyRI function)
python3 $PATH_TO_PLOTSR syri.out refgenome_chr.fa  -H 8 -W 5

#6) Output divergence score from SyRI analysis (Python)
module load scipy-stack
source /home/kaedeh/projects/def-gowens/kaedeh/cranberry_genome/bin/python_env/bin/activate
python3       #the three ">" appears which tells you that you're writing python command
>>> from syri.pyxFiles.synsearchFunctions import samtocoords
>>> table=samtocoords("/home/kaedeh/scratch/paired_genome_for_syri/$genus/minimap2_ref_qrygenome_chr_rev_alignment.sam")
>>> table.to_csv(r'table.txt', index = False, sep = '\t') #makes table.txt file in CSV format in my directory
exit()

#7) Format SyRI output into tidy table
cat invOut.txt | perl /project/def-gowens/gowens/bin/syriout2table.pl > invOut_table.txt
cat synOut.txt | perl /project/def-gowens/gowens/bin/syriout2table.pl > synOut_table.txt
cat TLOut.txt | perl /project/def-gowens/gowens/bin/syriout2table.pl > TLOut_table.txt
cat invTLOut.txt | perl /project/def-gowens/gowens/bin/syriout2table.pl > invTLOut_table.txt
cat invDupOut.txt | perl /project/def-gowens/gowens/bin/syriout2table.pl > invDupOut_table.txt
cat dupOut.txt | perl /project/def-gowens/gowens/bin/syriout2table.pl > dupOut_table.txt

#8 Merge outputs and make tables in R Studio
#8.1) Import data frame
#8.2) Make data frame into tibble
#8.3) Rename variables
#8.4) Merge tables
#8.5) Plot histogram
